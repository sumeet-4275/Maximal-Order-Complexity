# -*- coding: utf-8 -*-
"""MOC.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RX6vL2pzFBkvE02OH0qrYT0OPA4Z1cWA
"""

def longestcommonprefix(str1, str2):
        i = 0
        while i < len(str1) and i < len(str2):
            if list(str1)[i] == list(str2)[i]:
                i += 1
            else:
                break
        return i

def findMOC(binstr):
        # Get the length of longest repeated substring
        n = len(binstr)
        # Used to store the suffix array
        suffixes = [None] * n
        maxlenofrepsbstr = 0
        # Retrieve suffixes and store them in suffix array
        i = 0
        while i < n:
            suffixes[i] = txt[i:]
            i = i + 1
        # Sort the suffix array before creating LCP
        suffixes.sort()
        # Make the LCP array the maximum value of it is LSR, and MOC is LSR + 1 
        lcp = [None] * n
        lcp[0] = 0
        i = 1
        while i < n:
            lcp[i] = longestcommonprefix(suffixes[i], suffixes[i - 1])
            if lcp[i] > maxlenofrepsbstr:
                maxlenofrepsbstr = lcp[i]
            i = i + 1
        # Now MOC = LSR + 1
        print(lcp)
        print(suffixes)
        return maxlenofrepsbstr + 1

txt = '101101100110011'
ans = findMOC(txt)
print(f'The MOC of given binary string is {ans}')